// KLIENT 1 "klient"
 
#include <windows.h>
#include <winsock2.h>
#include <stdio.h>
 
#define NETWORK_ERROR -1
#define NETWORK_OK     0
#define IP_ADDRESS "127.0.0.1"
#define CONN_PORT 8888
 
void report_error(const char *);
 
int main(void){
    WORD sockVersion;
    WSADATA wsaData;
    SOCKET clientSocket;
    struct sockaddr_in serverInfo;
    int sError;
    char arr[512], arr2[512];
    //char IP_ADDRESS[15];
    sockVersion = MAKEWORD(2, 0);
    //printf("Mata in ip-adressen till servern: ");
    //gets(IP_ADDRESS); // Tar emot ip adress
 
    // Fill a socketaddr_in struct with address information
    serverInfo.sin_family = AF_INET;
    serverInfo.sin_addr.s_addr = inet_addr(IP_ADDRESS); //lägger in ip-adressen i structen
    serverInfo.sin_port = htons(CONN_PORT);  // Change to network-byte order and insert into port field
 
    // Initialize Winsock
    WSAStartup(sockVersion, &wsaData);
 
    // Create the socket
    clientSocket = socket(AF_INET,          // Go over TCP/IP
                          SOCK_STREAM,  // A stream-oriented socket
                          IPPROTO_TCP); // Use TCP protocol
 
    if(clientSocket == INVALID_SOCKET) {
        report_error("socket()");
        WSACleanup();
        return NETWORK_ERROR;
    }
 
    printf("\nCreate socket ok!");
    printf("\nTrying to connect to server (%s)...",IP_ADDRESS);
 
    // Connect to the server
    sError = connect(clientSocket, (LPSOCKADDR)&serverInfo, sizeof(struct sockaddr));
 
    if(sError == SOCKET_ERROR) {
        report_error("connect()");
        WSACleanup();
        return NETWORK_ERROR;
    }
 
    // Successfully connected
    printf("\nConnected to server (%s)!\n",IP_ADDRESS);
 
 
    unsigned long on = 1;
    ioctlsocket(clientSocket, FIONBIO, &on);
    while (1){
        memset(arr,0,strlen(arr)); //rensar
        printf("\nInput: ");
        gets(arr);
 
        recv(clientSocket, arr2,sizeof(arr2),0);//tar emot meddelandet med storleken på meddelandet
        printf("Durid skrev: %s ",arr2);
        send(clientSocket, arr,sizeof(arr),0);
        fflush(stdin);
    }
 
 
    system("PAUSE");
 
 
 
    printf("\nDisconnected from server!\n\n");
 
    // Clean up!
    closesocket(clientSocket);
    WSACleanup();
    system("PAUSE");
    return 0;
}
 
/********************************************************************
* Function grabs the last socket error number and displays an error *
********************************************************************/
void skicka(int clientSocket){
    char arr[100];
    while (arr[0] != '#'){//kör så länge det inte är #
                printf("inmatning:\n");
                gets(arr);//tar emot en string
                if (send(clientSocket, arr,sizeof(arr),0) < 0){//Skickar arrayen, om strängen är mindre än 0 har det blivit fel
                    printf("send failed\n");
                    arr[0] = '#';//Om ett fel sker sätter vi in # och kopplar ner
                }
            }
}
void report_error(const char *whichFunc)
{
    int errorCode;
    char errorMsg[100]={};
 
    errorCode = WSAGetLastError(); // Grab last error message
 
    // Generate error string
    sprintf(errorMsg, "Call to %s returned error %d!", (char *)whichFunc, errorCode);
 
    // Print error message in console window
    printf("\n%s",errorMsg);
 
    // Popup window with error message, just for fun
    MessageBox(NULL, errorMsg, "socket indication", MB_OK);
}
