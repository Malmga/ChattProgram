// *********************************************************************************
// KLIENT 2 "server"
 
#include <windows.h>
#include <winsock2.h>
#include <stdio.h>
#define NETWORK_ERROR -1
#define NETWORK_OK     1
#define CONN_PORT 8888
 
 
 
#include <unistd.h>
 
void report_error(const char *);
 
int main(void)  {
    WORD sockVersion;
    WSADATA wsaData;
    SOCKET listeningSocket, clientSocket;
    struct sockaddr_in serverInfo, clientInfo;
    int sError, error, size, listening=1;
    char arr[512], arr2[512];
 
 
    sockVersion = MAKEWORD(2, 0); // Use Winsock version 2.0
 
    // Use sockaddr_in struct to fill in address information
    serverInfo.sin_family = AF_INET;
    serverInfo.sin_addr.s_addr = INADDR_ANY;    // Since this socket is listening for connections, any local address will do
    serverInfo.sin_port = htons(CONN_PORT);         // Convert integer to network-byte order and insert into the port field
 
    // Initializing Winsock
    error = WSAStartup(sockVersion, &wsaData);
 
    // Check for error
    if (error != 0) {
        report_error("WSAStartup()");
        WSACleanup();
        return NETWORK_ERROR;
    }
 
    // Create the listening socket
    listeningSocket = socket(AF_INET,       // Use TCP/IP
                             SOCK_STREAM,   // A stream-oriented socket
                             IPPROTO_TCP);  // Use TCP protocol
 
    if (listeningSocket == INVALID_SOCKET) {
        report_error("socket()");   // Report the error with our custom function
        WSACleanup();               // Shutdown Winsock
        return NETWORK_ERROR;
    }
 
    printf("\nCreate socket ok!");
 
    // Bind the socket to our local server address
    sError = bind(listeningSocket, (LPSOCKADDR)&serverInfo, sizeof(struct sockaddr_in));
 
    if (sError == SOCKET_ERROR) {
        report_error("bind()");
        WSACleanup();
        return NETWORK_ERROR;
    }
 
    printf("\nBind ok!");
 
    // Make the socket listen. Up to 10 connections may wait at any one time to be accepted
    sError = listen(listeningSocket, 10);
 
    if (sError == SOCKET_ERROR) {
        report_error("listen()");
        WSACleanup();
        return NETWORK_ERROR;
    }
 
    printf("\nSocket is now in listen mode!\n");
 
    while(listening) {
        printf("\nWaiting for a client...");
 
        // Wait for a client to connect, if accepted store info from connecting client in clientInfo
        size = sizeof(clientInfo);
        clientSocket = accept(listeningSocket, (struct sockaddr *)&clientInfo, &size);
 
        if (clientSocket == INVALID_SOCKET) {
            report_error("accept()");
            WSACleanup();
            return NETWORK_ERROR;
        }
 
        printf("\nConnect from client %s, port %d\n",inet_ntoa(clientInfo.sin_addr),
               ntohs(clientInfo.sin_port));
 
 
 
        // where socketfd is the socket you want to make non-blocking
        unsigned long on = 1;
        ioctlsocket(clientSocket, FIONBIO, &on);
        int retVal, readfds;
 
        while (1){
        memset(arr,0,sizeof(arr)); //rensar
        memset(arr2,0,sizeof(arr2));
 
        printf("\nInput: ");
        gets(arr);
        send(clientSocket, arr,sizeof(arr),0);
        recv(clientSocket, arr2,sizeof(arr2),0);
 
        if(arr2[0]!='\0')
            printf("Durid skrev: %s ",arr2);
 
        fflush(stdin);
        }
        printf("\nNothing to do...");
 
        closesocket(clientSocket);
        printf("\nClient disconnected!\n\n");
    }
    closesocket(listeningSocket);
    printf("\nListening socket closed!\n\n");
 
    // Shutdown Winsock
    WSACleanup();
 
    return NETWORK_OK;
}
 
 
void taemot(clientSocket){
    char arr[100];
    while (arr[0] != '#'){//om första platsen i arr inte är # så loopar vi
        memset(arr,0,strlen(arr)); //rensar
        if(recv(clientSocket, arr,sizeof(arr),0)<= 0){//tar emot meddelandet med storleken på meddelandet
            printf("\nanslutning bruten\n");// om arren är mindre än 0 så har det blivit fel och avbryter
            arr[0] = '#';//stänger loopen
        }
        else{
            printf("\n%s ",arr);//skriver ut meddelandet
        }
    }
}
void report_error(const char *whichFunc)
{
    int errorCode;
    char errorMsg[100]={};
 
    errorCode = WSAGetLastError(); // Grab last error message
 
    // Generate error string
    sprintf(errorMsg, "Call to %s returned error %d!", (char *)whichFunc, errorCode);
 
    // Print error message in console window
    printf("\n%s",errorMsg);
 
    // Popup window with error message, just for fun
    MessageBox(NULL, errorMsg, "socket indication", MB_OK);
}
